pipeline {
  agent any
  environment {
    GIT_BRANCH=getGitBranch()
    GIT_CREDS_ID='weshop-git'
    GIT_URL='git@github.com:we-shop/test-api.git'
    AWS_REGION='eu-west-1'
    AWS_DOCKER_REPO_USER='AWS'
    REGHOST='259366225118.dkr.ecr.eu-west-1.amazonaws.com'
    AWS_CREDENTIAL_ID='jenkins'
    PROJECT_NAME='test-api'
    IMAGE_TAG=getImageTagFromEnv(params.BACKEND_ENV)
    IMAGE_NAME_FULL="${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG}"
    TEST_SCOPE=getTestScope(params.TEST_SCOPE)
    CONTAINER_ID=''
  }
  stages {
    stage('Get source code') {
      steps {
        script {
          echo "Checking out project source code"
          checkout([
            $class: 'GitSCM',
            branches: [
                [name: "${GIT_BRANCH}" ]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [
              [
                  credentialsId: "${GIT_CREDS_ID}",
                  url: "${GIT_URL}"
              ]
            ]
          ])
        }
      }
    }
    stage('Logging in to AWS ECR') {
      steps{
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding', 
          accessKeyVariable: "AWS_ACCESS_KEY_ID", 
          credentialsId: "${AWS_CREDENTIAL_ID}", 
          secretKeyVariable: "AWS_SECRET_ACCESS_KEY"
          ]]){
            sh """
              aws ecr get-login-password --region ${AWS_REGION} | docker login -u ${AWS_DOCKER_REPO_USER} --password-stdin ${REGHOST}
            """
          }
      }
    }
    stage('Pulling the image from AWS ECR') {
      steps{
        script {
          sh """
          docker pull ${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG} 
          """   
//          sh(returnStdout: 1, script: "\$(docker images ${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG} -q | wc -l)").trim()

//          sh """
//          echo We have pulled exactly \$(docker images ${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG} -q | wc -l) new image(s)
//          """
        }
      }
    }
    stage('Starting container') {
      steps{
        script {
          sh """
          rm -rf "\$(pwd)/logs" 
          mkdir "\$(pwd)/logs"
          docker run -dit --name testapi --mount type=bind,source="\$(pwd)"/logs,target=/app/logs ${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG}
          """
//          sh(returnStdout: 1, script: "\$(docker ps -q --filter ancestor=${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG} | wc -l)").trim()

//          sh """
//          export CONTAINER_ID=\$(docker ps -q --filter ancestor=${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG})
//          echo We have successfully started exactly \$(echo ${env.CONTAINER_ID} | wc -l) new container(s)
//          """
        }
      }
    }
    stage('Running tests') {
      steps{
        script {
          sh """
          docker exec --env BACKEND_ENV=${params.BACKEND_ENV} \$(docker ps -q --filter ancestor=${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG}) npm run ${TEST_SCOPE}
          """
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'logs/*'
        }
      }
    }
  }
  post {
    always {
      echo "Cleaning local data"
      echo "Local container is about to be killed and removed"
      sh """
      docker kill \$(docker ps -a -q)
      docker container prune -f
      """
      echo "Local image is about to be removed"
      sh """
      docker rmi -f \$(docker images -q)
      docker image prune -f
      """
      echo "Workspace is about to be cleaned out"
      cleanWs()
    }
  }
}

def getImageTagFromEnv(backendEnv){
  def tag
  if (backendEnv.contains('UAT')){
    tag = 'UAT' + '-latest'
    println "${tag}"
  } else if (backendEnv.contains('INT')) {
    tag = 'INT' + '-latest'
    println "${tag}"
  } else {
    tag = 'FEA' + '-latest-' + params.GIT_COMMIT_HASH
    println "${tag}"
  }
  return tag
}

def getTestScope(testScope){
  def scopeMap = [
    ALL: "all",
    OAUTH: "oauth",
    OAUTH1: "oauth1",
    OAUTH2: "oauth2",
    POSTS: "posts",
    POSTS1: "posts1",
    POSTS2: "posts2"
  ]
  def scope = scopeMap.get(params.TEST_SCOPE)
  return scope
} 

def getGitBranch(){
  return params.BRANCH
}