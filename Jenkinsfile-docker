pipeline {
  agent any
  environment {
    AWS_REGION='eu-west-1'
    AWS_DOCKER_REPO_USER='AWS'
    REGHOST = '259366225118.dkr.ecr.eu-west-1.amazonaws.com'
    AWS_CREDENTIAL_ID='jenkins'
    PROJECT_NAME= 'test-api'
    IMAGE_TAG = getImageTag(params.BRANCH)
  }
  stages {
    stage('Get source code') {
      steps {
        script {
          echo "Checking out project source code"
          checkout([
            $class: 'GitSCM',
            branches: [
                [name: params.BRANCH ]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [
              [
                  credentialsId: 'weshop-git',
                  url: 'git@github.com:we-shop/test-api.git'
              ]
            ]
          ])
        }
      }
    }
    stage('Checking state of environment') {
      steps{
        script {
          echo "Image registry host: ${REGHOST}"
          echo "Project name: ${PROJECT_NAME}"
          echo "Image tag value: ${IMAGE_TAG}"
        }
      }
    }
    stage('Building image') {
      steps{
        script {
          echo "Building image tag using the following value for the tag: ${IMAGE_TAG}"
          sh """
            docker build --tag test-api:${IMAGE_TAG} .
          """
        }
      }
    }
    stage('Tagging image') {
      steps{
        script {
          echo "Tagging local image to the remote one"
          sh """
            docker image tag test-api:${IMAGE_TAG} ${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG}
          """
        }
      }
    }
    stage('Deploying Image') {
      steps{
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: "AWS_ACCESS_KEY_ID", credentialsId: "${AWS_CREDENTIAL_ID}", secretKeyVariable: "AWS_SECRET_ACCESS_KEY"]]){
          sh """
            aws ecr get-login-password --region ${AWS_REGION} | docker login -u ${AWS_DOCKER_REPO_USER} --password-stdin ${REGHOST}
            docker image tag test-api:${IMAGE_TAG} ${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG}
            docker image push ${REGHOST}/${PROJECT_NAME}:${IMAGE_TAG}
          """
        }
      }
    }
  }
  post {
    always {
      echo "Cleaning local data"
      echo "Local image is about to be removed"
      sh """
      docker rmi -f \$(docker images -q)
      docker image prune -f
      """
      echo "Workspace is about to be cleaned out"
      cleanWs()
    }
  }
}

def getImageTag(branchName){
  def tag
  if (branchName.contains('master')){
    tag = 'UAT' + '-latest'
    println "${tag}"
  } else if (branchName.contains('develop')) {
    tag = 'INT' + '-latest'
    println "${tag}"
  } else {
    tag = 'FEA' + '-latest-' + env.GIT_COMMIT.substring(0,9)
    println "${tag}"
  }
  return tag
}